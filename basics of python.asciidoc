+*In[2]:*+
[source, ipython3]
----
#addres of the varible
n=9
id(n) 

----


+*Out[2]:*+
----140704285631120----


+*In[3]:*+
[source, ipython3]
----
name='parikshit'
id(name)
----


+*Out[3]:*+
----2866431880368----


+*In[8]:*+
[source, ipython3]
----
a=5  #they both point same addres and have same box that that python is memory efficent
b=a
id(a)

----


+*Out[8]:*+
----140704285630992----


+*In[9]:*+
[source, ipython3]
----
#constant =not able to change its value
pi=3.14 #constant
r=1
area=pi*r*r
print(area)
----


+*Out[9]:*+
----
3.14
----


+*In[12]:*+
[source, ipython3]
----
#type of varible
pi=3.14
type(pi)
----


+*Out[12]:*+
----float----


+*In[13]:*+
[source, ipython3]
----
a=9
type(a)
----


+*Out[13]:*+
----int----


+*In[14]:*+
[source, ipython3]
----
b='a'
type(b)
----


+*Out[14]:*+
----str----


+*In[15]:*+
[source, ipython3]
----
#data type in python
#none=not assigned with any value
#numeric int,float,complex,bool
#complex
n=6+9j
type(n)



----


+*Out[15]:*+
----complex----


+*In[17]:*+
[source, ipython3]
----
#float into int conversion
a=8.9
b=int(a)
type(b)

----


+*Out[17]:*+
----int----


+*In[19]:*+
[source, ipython3]
----
#int into float
a=5
b=float(a)
b
----


+*Out[19]:*+
----5.0----


+*In[20]:*+
[source, ipython3]
----
#normal into complex
k=9
c=complex(b,k)
c
----


+*Out[20]:*+
----(5+9j)----


+*In[21]:*+
[source, ipython3]
----
#bool =true and false
b=8
k=7
b<k
----


+*Out[21]:*+
----False----


+*In[22]:*+
[source, ipython3]
----
#convert true into number
int(True)
----


+*Out[22]:*+
----1----


+*In[23]:*+
[source, ipython3]
----
#convert false into number
int(False)
----


+*Out[23]:*+
----0----


+*In[24]:*+
[source, ipython3]
----
#sequence 
#1 list
l=[1,3,4,6,7]
type(l)
----


+*Out[24]:*+
----list----


+*In[25]:*+
[source, ipython3]
----
l=[1,3,4,6,7]
l
----


+*Out[25]:*+
----[1, 3, 4, 6, 7]----


+*In[26]:*+
[source, ipython3]
----
#set
s={1,6,89,678}
type(s)
----


+*Out[26]:*+
----set----


+*In[27]:*+
[source, ipython3]
----
s={1,6,89,678}
s
----


+*Out[27]:*+
----{1, 6, 89, 678}----


+*In[28]:*+
[source, ipython3]
----
#tuple =round breacket
a=(1,2,3)
type(a)

----


+*Out[28]:*+
----tuple----


+*In[29]:*+
[source, ipython3]
----
a=(1,2,3)
a
----


+*Out[29]:*+
----(1, 2, 3)----


+*In[30]:*+
[source, ipython3]
----
#string
str="parik"
type(str)
----


+*Out[30]:*+
----str----


+*In[31]:*+
[source, ipython3]
----
str="parik" #python have no char type
str
----


+*Out[31]:*+
----'parik'----


+*In[34]:*+
[source, ipython3]
----
#range
range(0,10)
list(range(10))
----


+*Out[34]:*+
----[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]----


+*In[35]:*+
[source, ipython3]
----
#range with differce of two
set(range(1,20,2))
----


+*Out[35]:*+
----{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}----


+*In[37]:*+
[source, ipython3]
----
#maping or dictionary
d={'parikshit':'iphone SE','Rahul':'oneplus','khesha':'samsung'}
d.keys()
----


+*Out[37]:*+
----dict_keys(['parikshit', 'Rahul', 'khesha'])----


+*In[38]:*+
[source, ipython3]
----
d={'parikshit':'iphone SE','Rahul':'oneplus','khesha':'samsung'}
d.values()
----


+*Out[38]:*+
----dict_values(['iphone SE', 'oneplus', 'samsung'])----


+*In[40]:*+
[source, ipython3]
----
d={'parikshit':'iphone SE','Rahul':'oneplus','khesha':'samsung'}
d['Rahul']
----


+*Out[40]:*+
----'oneplus'----


+*In[41]:*+
[source, ipython3]
----
d={'parikshit':'iphone SE','Rahul':'oneplus','khesha':'samsung'}
d.get('parikshit')
----


+*Out[41]:*+
----'iphone SE'----


+*In[46]:*+
[source, ipython3]
----
#Operators in Python
#arithmetic operators
x=9
y=39
x+y


----


+*Out[46]:*+
----48----


+*In[47]:*+
[source, ipython3]
----
#increment
#increment value by 2
x=2
x+=2
x
----


+*Out[47]:*+
----4----


+*In[48]:*+
[source, ipython3]
----
#when increment by 17
x=90
x+=17
x
----


+*Out[48]:*+
----107----


+*In[50]:*+
[source, ipython3]
----
#decremenr by 2
x=98
x-=2
x
----


+*Out[50]:*+
----96----


+*In[51]:*+
[source, ipython3]
----
x=2
x*=3
x
----


+*Out[51]:*+
----6----


+*In[52]:*+
[source, ipython3]
----
(A,B)=(5,6)
(A,B)#assignment operator
----


+*Out[52]:*+
----(5, 6)----


+*In[54]:*+
[source, ipython3]
----
#Unary operators are those operators that require a single operand for computations
n=7
-n
----


+*Out[54]:*+
-----7----


+*In[55]:*+
[source, ipython3]
----
#RElational operator Comparison operators. They are used to compare the operands on either side and determine the relation between them.
a=90
b=87
a<b

----


+*Out[55]:*+
----False----


+*In[56]:*+
[source, ipython3]
----
a=6
b=8
a==b
----


+*Out[56]:*+
----False----


+*In[59]:*+
[source, ipython3]
----
a=89
b=90
a>=b
----


+*Out[59]:*+
----False----


+*In[60]:*+
[source, ipython3]
----
a=3
b=90
a!=b #not equal 
----


+*Out[60]:*+
----True----


+*In[61]:*+
[source, ipython3]
----
#logical operators=are used on conditional statements 
#and,or,not
a=7
b=4
a<8 and b<7
----


+*Out[61]:*+
----True----


+*In[62]:*+
[source, ipython3]
----
#or= only condition is true
a<8 or b<2
----


+*Out[62]:*+
----True----


+*In[67]:*+
[source, ipython3]
----
#not
x=not x
x

----


+*Out[67]:*+
----False----


+*In[68]:*+
[source, ipython3]
----
#number system conversion
#binary,decimal,octal,hex decimal
#binary conversion
bin(25)

----


+*Out[68]:*+
----'0b11001'----


+*In[69]:*+
[source, ipython3]
----
#convert binary to dec
0b11001

----


+*Out[69]:*+
----25----


+*In[70]:*+
[source, ipython3]
----
#octal
oct(34)
----


+*Out[70]:*+
----'0o42'----


+*In[71]:*+
[source, ipython3]
----
#hexadecimal
hex(10)
----


+*Out[71]:*+
----'0xa'----


+*In[72]:*+
[source, ipython3]
----
0xf
----


+*Out[72]:*+
----15----


+*In[76]:*+
[source, ipython3]
----
#swap 2 variable in can not use third varible python
a=19
b=15
a=a+b
b=a-b
a=a-b
print(a)
print(b)

----


+*Out[76]:*+
----
15
19
----


+*In[77]:*+
[source, ipython3]
----
#swap
a=9
b=7
a,b=b,a
print(a)
print(b)

----


+*Out[77]:*+
----
7
9
----


+*In[78]:*+
[source, ipython3]
----
#swap by third varible
a=7
b=3
temp=a
a=b
b=temp
print(a)
print(b)
----


+*Out[78]:*+
----
3
7
----


+*In[79]:*+
[source, ipython3]
----
#import math function
#suare
import math
x=math.sqrt(45)
x
----


+*Out[79]:*+
----6.708203932499369----


+*In[80]:*+
[source, ipython3]
----
#floor function
import math
print(math.floor(5.6))#floor will give you low interger
----


+*Out[80]:*+
----
5
----


+*In[82]:*+
[source, ipython3]
----
#ceil
import math
print(math.ceil(2.4))#ceil will give you highest interger
----


+*Out[82]:*+
----
3
----


+*In[83]:*+
[source, ipython3]
----
#power
print(math.pow(3,6))
----


+*Out[83]:*+
----
729.0
----


+*In[84]:*+
[source, ipython3]
----
print(math.pi)
----


+*Out[84]:*+
----
3.141592653589793
----


+*In[85]:*+
[source, ipython3]
----
import math as m #alise
m.sqrt(657)
----


+*Out[85]:*+
----25.632011235952593----


+*In[ ]:*+
[source, ipython3]
----

----


+*In[ ]:*+
[source, ipython3]
----

----
